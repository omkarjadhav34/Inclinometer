/**
 * @file 	main.c
 * @author 	Omkar Jadhav (omjadhav@pdx.edu)
 *
 * @brief	The header file contains prototypes for MPU6050 sensor
 *
 * @rev	 1.0  - Created file
 * 			  - Added platform initialization, MPU6050 Sensor I2C initialization, UART Support
 */
/******************* File Includes **************************************/
#include <stdio.h>
#include <string.h>
#include "nexys4io.h"
#include "xplatform_info.h"
#include "xil_printf.h"
#include "xuartlite.h"
#include "xiic.h"
#include "MPU6050/mpu6050.h"
#include "FreeRTOS.h"
#include "task.h"


/****************** Macro Definitions ***********************************/
#define 	RUN  					1
#define 	TEST					2
#define 	UP						4
#define		DOWN					8
#define 	TIMER_ID				1
#define 	DELAY_10_SECONDS		10000UL
#define 	DELAY_1_SECOND			1000UL
#define 	TIMER_CHECK_THRESHOLD	9


/****************** Global Declarations *******************************/
typedef struct
{
	int target_angle;
	int angle_actual;
	int mode;
} taskParameters_t;

XUartLite uart;
XUartLite_Config uart_cfg;
XIic i2c;
XIic_Config i2c_cfg;
MPU6050 mpu6050;
static TaskHandle_t xMenuTask;
static TaskHandle_t xDataTask;
static TaskHandle_t xPIDTask;
static TaskHandle_t xUARTTask;
static taskParameters_t taskParam;
								// Target Angle

/****************** Function Protoypes *********************************/
int platform_init();
int display_menu(int *target_angle);
void pid_control(int *angle_target, int *angle_actual);
int i2c_init();
int uart_init();
void run();
void test();


int main()
{
	/*
	 * Steps to build firmware:
	 * 1. Platform initialization - Contains uart, i2c initialization
	 * 2. Test UART setup with the console, terminal
	 * 3. Test Sensor integration by reading the device code
	 * 4. Display Menu module - Contains test mode and the run mode. User should specify the angle as a setpoint
	 * 5. Keep waiting for the user to start the run based on a character
	 * 6. Run - Mode:
	 * 		a. Get sensor readings
	 * 		b. PID Control
	 * 		c. Display the error on the leds
	 * 		d. Check if the setpoint has been increased by monitoring the button value
	 */

	if (platform_init() != XST_SUCCESS)
	{
		xil_printf("Platform Initialization failed \n\r");
	}

	mpu6050_init(&i2c, &mpu6050);
	mpu6050_gyroCfg(&i2c, &mpu6050);

	xTaskCreate( 	prvMenuTask, 					/* The function that implements the task. */
					( const char * ) "Tx", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xMenuTask );

	xTaskCreate( prvGyroDataTask,
				 ( const char * ) "GB",
				 configMINIMAL_STACK_SIZE,
				 NULL,
				 tskIDLE_PRIORITY + 1,
				 &xDataTask );

	xTaskCreate( 	prvPIDTask, 					/* The function that implements the task. */
					( const char * ) "Tx", 		/* Text name for the task, provided to assist debugging only. */
					configMINIMAL_STACK_SIZE, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xPIDTask );

	/* Intially only run the Menu task. This helps to set the set point and be in run mode.
	 * Gyro data task can be resumed in the menu task while PID Controller task can be resumed in the gyro data task
	 */
	vTaskSuspend( prvGyroDataTask );
	vTaskSuspend( prvPIDTask );

	vTaskStartScheduler();
	for(;;)


	while(1)
	{
		int mode;
		int target_angle;
		int angle_actual;
		char user_dat;
		mode = display_menu(&target_angle);
		xil_printf("mode:%s\n\r", (mode == RUN)?"Run": "Test");

		if (mode == RUN)
		{
			//user_dat = inbyte();

			while(user_dat != 'd')
			{
				mpu6050_getData(&i2c, &mpu6050, &angle_actual);
				xil_printf("target_angle: %d, actual_angle:%d\n\r", target_angle, angle_actual);
				pid_control(&target_angle, &angle_actual);


				user_dat = inbyte();
			}

		}
		else if (mode == TEST)
		{

		}
	}

	return 0;
}

void prvMenuTask(void *parameters)
{
	char c, mode;
	int angle = 0;

	for( ; ; )
	{
			xil_printf("Welcome to Inclinometer Menu\n\r\n\r");
			xil_printf("Please select any one option:\n\r");
			xil_printf("1. Run Mode - R\n\r");
			xil_printf("2. Test Mode - T\n\r");

			mode = inbyte();

			while(mode == '\0') mode = inbyte();
			xil_printf("c:%c\n\r", mode);

			switch(mode)
			{
				case 'r':
				case 'R':
							xil_printf("Enter the target angle (in degrees) (-160 to 160)\n\r");
							c = inbyte();
							while(c == '\0') c = inbyte();
							xil_printf("c: %d\n\r", c);
							angle = (int)(c - '0');
							angle = angle * 10 + (inbyte() - '0');
							angle = angle * 10 + (inbyte() - '0');
							break;
				case 't':
				case 'T':
							xil_printf("Test Mode:\n\r");
							// gyro_calib();
							break;
			};

			xil_printf("ANGLE: %d\n\r", (int)angle);
			taskParam.target_angle = angle;
			taskParam.mode = mode;

	}
}

int platform_init()
{
	uint32_t status;

	//ASSERT(XPLAT_MICROBLAZE != XGetPlatform_Info());
	//ASSERT(XST_SUCCESS != uart_init());
	//ASSERT(XST_SUCCESS != i2c_init());

	// initialize the Nexys4 driver and (some of)the devices
	status = (uint32_t) NX4IO_initialize(XPAR_NEXYS4IO_0_S00_AXI_BASEADDR);

	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	NX4IO_setLEDs(0x13);

	return status;
}


int uart_init(void)
{
	// Configure the uart Module
	uart.IsReady= true;
	uart.RegBaseAddress = XPAR_UARTLITE_1_BASEADDR;
	XUartLite_Config uart_cfg;
	uart_cfg.BaudRate = 115200;
	uart_cfg.DataBits= 8;
	uart_cfg.RegBaseAddr = XPAR_UARTLITE_1_BASEADDR;
	uart_cfg.UseParity = false;
	uart_cfg.ParityOdd = true;

	// Initialize the uart
	XUartLite_CfgInitialize(&uart, &uart_cfg, XPAR_UARTLITE_1_BASEADDR);

	return XUartLite_Initialize(&uart, XPAR_UARTLITE_1_DEVICE_ID);
}

int i2c_init(void)
{
	i2c_cfg.DeviceId		= XPAR_AXI_IIC_0_DEVICE_ID;	  	/**< Unique ID  of device */
	i2c_cfg.BaseAddress 	= XPAR_AXI_IIC_0_BASEADDR;  	/**< Device base address */
	i2c_cfg.Has10BitAddr 	= XPAR_AXI_IIC_0_TEN_BIT_ADR; 	/**< Does device have 10 bit address decoding */
	i2c_cfg.GpOutWidth 		= XPAR_AXI_IIC_0_GPO_WIDTH;	  	/**< Number of bits in general purpose output */

	i2c.BaseAddress 		= XPAR_AXI_IIC_0_BASEADDR;  	/**< Device base address */
	i2c.Has10BitAddr 		= XPAR_AXI_IIC_0_TEN_BIT_ADR; 	/**< Does device have 10 bit address decoding */
	i2c.GpOutWidth 			= XPAR_AXI_IIC_0_GPO_WIDTH;	  	/**< Number of bits in general purpose output */

	XIic_CfgInitialize(&i2c, &i2c_cfg, XPAR_AXI_IIC_0_BASEADDR);

	return XIic_Initialize(&i2c, XPAR_IIC_0_DEVICE_ID);
}

int display_menu(int* target_angle)
{
	char c, mode;
	int angle = 0;
	xil_printf("Welcome to Inclinometer Menu\n\r\n\r");
	xil_printf("Please select any one option:\n\r");
	xil_printf("1. Run Mode - R\n\r");
	xil_printf("2. Test Mode - T\n\r");

	mode = inbyte();

	while(mode == '\0') mode = inbyte();
	xil_printf("c:%c\n\r", mode);

	switch(mode)
	{
		case 'r':
		case 'R':
					xil_printf("Enter the target angle (in degrees) (-160 to 160)\n\r");
					c = inbyte();
					while(c == '\0') c = inbyte();
					xil_printf("c: %d\n\r", c);
					angle = (int)(c - '0');
					angle = angle * 10 + (inbyte() - '0');
					angle = angle * 10 + (inbyte() - '0');
					break;
		case 't':
		case 'T':
					xil_printf("Test Mode:\n\r");
					// gyro_calib();
					break;
	};

	xil_printf("ANGLE: %d\n\r", (int)angle);
	*target_angle = angle;

	return (mode == 'r' || mode == 'R') ? RUN: (mode == 't' || mode == 'T') ? TEST : -1;
}

void pid_control(int *angle_target, int *angle_actual)
{
	float kp = 0.01f;
    float ki = 0.0002f;
    float kd = 0.0001f;
    float time_step = 0.002f;
    float target_angle = (float)(*angle_target);
    float integralVal = 0.0f;
    float error = 0.0f;
    float prev_error = 0.0f;
    float angle_new = 0.0f;
    int btns_val = 0;

    xil_printf("target_angle:%d angle_actual: %d\n\r", target_angle, *angle_actual);

    prev_error = error;
    error = target_angle - (*angle_actual);
    xil_printf("error: %d\n\r", error);

    integralVal += error * time_step;

    xil_printf("integral_val: %d\n\r", (int)integralVal);

    angle_new = *angle_actual + kp * error + kd * ((error - prev_error) / time_step) + ki * integralVal;

    NX4IO_setLEDs((int) (target_angle - angle_new));
    xil_printf("angle_new: %d \n\r", (int)angle_new);

    btns_val = NX4IO_getBtns();

    switch(btns_val)
    {
    	case UP:
			*angle_target += 10;
    		break;

    	case DOWN:
			*angle_target -= 10;
			break;
    };


}
